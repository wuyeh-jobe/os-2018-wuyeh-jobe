GETLINE(3)                 Linux Programmer's Manual                GETLINE(3)

NNAAMMEE
       getline, getdelim - delimited string input

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddiioo..hh>>

       ssssiizzee__tt ggeettlliinnee((cchhaarr ****_l_i_n_e_p_t_r,, ssiizzee__tt **_n,, FFIILLEE **_s_t_r_e_a_m));;

       ssssiizzee__tt ggeettddeelliimm((cchhaarr ****_l_i_n_e_p_t_r,, ssiizzee__tt **_n,, iinntt _d_e_l_i_m,, FFIILLEE **_s_t_r_e_a_m));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ggeettlliinnee(), ggeettddeelliimm():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DDEESSCCRRIIPPTTIIOONN
       ggeettlliinnee()  reads an entire line from _s_t_r_e_a_m, storing the address of the
       buffer containing the text into _*_l_i_n_e_p_t_r.  The  buffer  is  null-termi‐
       nated and includes the newline character, if one was found.

       If  _*_l_i_n_e_p_t_r  is set to NULL and _*_n is set 0 before the call, then ggeett‐‐
       lliinnee() will allocate a buffer for storing the line.  This buffer should
       be freed by the user program even if ggeettlliinnee() failed.

       Alternatively, before calling ggeettlliinnee(), _*_l_i_n_e_p_t_r can contain a pointer
       to a mmaalllloocc(3)-allocated buffer _*_n bytes in size.  If the buffer is not
       large  enough  to  hold the line, ggeettlliinnee() resizes it with rreeaalllloocc(3),
       updating _*_l_i_n_e_p_t_r and _*_n as necessary.

       In either case, on a successful call, _*_l_i_n_e_p_t_r and _*_n will  be  updated
       to reflect the buffer address and allocated size respectively.

       ggeettddeelliimm()  works  like  ggeettlliinnee(),  except that a line delimiter other
       than newline can be specified as the _d_e_l_i_m_i_t_e_r argument.  As with  ggeett‐‐
       lliinnee(),  a  delimiter  character is not added if one was not present in
       the input before end of file was reached.

RREETTUURRNN VVAALLUUEE
       On success, ggeettlliinnee() and ggeettddeelliimm() return the  number  of  characters
       read,  including  the delimiter character, but not including the termi‐
       nating null byte ('\0').  This value can be  used  to  handle  embedded
       null bytes in the line read.

       Both  functions  return -1 on failure to read a line (including end-of-
       file condition).  In the event of an error, _e_r_r_n_o is  set  to  indicate
       the cause.

EERRRROORRSS
       EEIINNVVAALL Bad arguments (_n or _l_i_n_e_p_t_r is NULL, or _s_t_r_e_a_m is not valid).

       EENNOOMMEEMM Allocation or reallocation of the line buffer failed.

AATTTTRRIIBBUUTTEESS
       For   an   explanation   of   the  terms  used  in  this  section,  see
       aattttrriibbuutteess(7).

       ┌──────────────────────┬───────────────┬─────────┐
       │IInntteerrffaaccee             │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├──────────────────────┼───────────────┼─────────┤
       │ggeettlliinnee(), ggeettddeelliimm() │ Thread safety │ MT-Safe │
       └──────────────────────┴───────────────┴─────────┘

CCOONNFFOORRMMIINNGG TTOO
       Both ggeettlliinnee() and ggeettddeelliimm() were  originally  GNU  extensions.   They
       were standardized in POSIX.1-2008.

EEXXAAMMPPLLEE
       #define _GNU_SOURCE
       #include <stdio.h>
       #include <stdlib.h>

       int
       main(int argc, char *argv[])
       {
           FILE *stream;
           char *line = NULL;
           size_t len = 0;
           ssize_t nread;

           if (argc != 2) {
               fprintf(stderr, "Usage: %s <file>\n", argv[0]);
               exit(EXIT_FAILURE);
           }

           stream = fopen(argv[1], "r");
           if (stream == NULL) {
               perror("fopen");
               exit(EXIT_FAILURE);
           }

           while ((nread = getline(&line, &len, stream)) != -1) {
               printf("Retrieved line of length %zu:\n", nread);
               fwrite(line, nread, 1, stdout);
           }

           free(line);
           fclose(stream);
           exit(EXIT_SUCCESS);
       }

SSEEEE AALLSSOO
       rreeaadd(2), ffggeettss(3), ffooppeenn(3), ffrreeaadd(3), ssccaannff(3)

CCOOLLOOPPHHOONN
       This  page  is  part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

GNU                               2017-09-15                        GETLINE(3)
